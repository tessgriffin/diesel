initSidebarItems({"trait":[["BelongingToDsl",""],["CountDsl","Adds a simple `count` function to queries. Automatically implemented for all types which implement `SelectDsl`."],["ExecuteDsl",""],["FilterDsl","Adds to the `WHERE` clause of a query. If there is already a `WHERE` clause, the result will be `old AND new`. This is automatically implemented for the various query builder types."],["LimitDsl","Sets the limit clause of a query. If there was already a limit clause, it will be overridden. This is automatically implemented for the various query builder types."],["LoadDsl","Methods to execute a query given a connection. These are automatically implemented for the various query types."],["OffsetDsl","Sets the offset clause of a query. If there was already a offset clause, it will be overridden. This is automatically implemented for the various query builder types."],["OrderDsl","Sets the order clause of a query. If there was already a order clause, it will be overridden. The expression passed to `order` must actually be valid for the query. See also: `.desc()` and `.asc()`"],["SelectDsl","Sets the select clause of a query. If there was already a select clause, it will be overridden. The expression passed to `select` must actually be valid for the query (only contains columns from the target table, doesn't mix aggregate + non-aggregate expressions, etc)."],["WithDsl","Adds an additional expression to the FROM clause. This is useful for things like full text search, where you need to access the result of an expensive computation for the where clause that shouldn't be redone for each row, such as `plain_to_tsquery`. See `.aliased` for more"]]});